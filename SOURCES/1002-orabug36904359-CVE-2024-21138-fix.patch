From 3dd1095e9aac868078aaaa8b6d1da51873545a4e Mon Sep 17 00:00:00 2001
From: Aleksei Voitylov <avoitylov@openjdk.org>
Date: Mon, 3 Jun 2024 22:52:00 +0000
Subject: [PATCH] 8319859: Better symbol storage

Reviewed-by: mbalao, andrew, yan
Backport-of: f7857e9106841f402ade56bad0338fc53159fb9a

Cherry-pick upstream commit-id: 3dd1095e9aac868078aaaa8b6d1da51873545a4e

Orabug: 36904352

Signed-off-by: Sourav Sharma <sourav.ss.sharma@oracle.com>
Reviewed-by: Laurence Rochfort <laurence.rochfort@oracle.com>

diff -up openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp.orig openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp
--- openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp.orig	2024-08-23 17:47:11.258306296 +0000
+++ openjdk/hotspot/src/share/vm/classfile/symbolTable.cpp	2024-08-23 17:53:30.276306296 +0000
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -236,7 +236,18 @@ unsigned int SymbolTable::hash_symbol(co
 // entries in the symbol table during normal execution (only during
 // safepoints).
 
+// Symbols should represent entities from the constant pool that are
+// limited to 64K in length, but usage errors creep in allowing Symbols
+// to be used for arbitrary strings. For debug builds we will assert if
+// a string is too long, whereas product builds will truncate it.
 Symbol* SymbolTable::lookup(const char* name, int len, TRAPS) {
+  assert(len <= Symbol::max_length(),
+         "String length exceeds the maximum Symbol length");
+  if (len > Symbol::max_length()) {
+    warning("A string \"%.80s ... %.80s\" exceeds the maximum Symbol "
+            "length of %d and has been truncated", name, (name + len - 80), Symbol::max_length());
+    len = Symbol::max_length();
+  }
   unsigned int hashValue = hash_symbol(name, len);
   int index = the_table()->hash_to_index(hashValue);
 
@@ -367,6 +378,7 @@ void SymbolTable::add(ClassLoaderData* l
     for (int i=0; i<names_count; i++) {
       int index = table->hash_to_index(hashValues[i]);
       bool c_heap = !loader_data->is_the_null_class_loader_data();
+      assert(lengths[i] <= Symbol::max_length(), "must be - these come from the constant pool");
       Symbol* sym = table->basic_add(index, (u1*)names[i], lengths[i], hashValues[i], c_heap, CHECK);
       cp->symbol_at_put(cp_indices[i], sym);
     }
@@ -391,6 +403,7 @@ Symbol* SymbolTable::basic_add(int index
                                unsigned int hashValue_arg, bool c_heap, TRAPS) {
   assert(!Universe::heap()->is_in_reserved(name),
          "proposed name of symbol must be stable");
+  assert(len <= Symbol::max_length(), "caller should have ensured this");
 
   // Don't allow symbols to be created which cannot fit in a Symbol*.
   if (len > Symbol::max_length()) {
diff -up openjdk/hotspot/src/share/vm/oops/symbol.cpp.orig openjdk/hotspot/src/share/vm/oops/symbol.cpp
--- openjdk/hotspot/src/share/vm/oops/symbol.cpp.orig	2024-08-23 17:55:26.940306296 +0000
+++ openjdk/hotspot/src/share/vm/oops/symbol.cpp	2024-08-23 17:56:51.887306296 +0000
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -33,6 +33,7 @@
 #include "memory/resourceArea.hpp"
 
 Symbol::Symbol(const u1* name, int length, int refcount) {
+  assert(length <= max_length(), "SymbolTable should have caught this!");
   _refcount = refcount;
   _length = length;
   _identity_hash = os::random();
diff -up openjdk/hotspot/src/share/vm/oops/symbol.hpp.orig openjdk/hotspot/src/share/vm/oops/symbol.hpp
--- openjdk/hotspot/src/share/vm/oops/symbol.hpp.orig	2024-08-23 17:57:39.767306296 +0000
+++ openjdk/hotspot/src/share/vm/oops/symbol.hpp	2024-08-23 17:59:34.440306296 +0000
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -135,6 +135,7 @@ class Symbol : private SymbolBase {
     _body[index] = value;
   }
 
+  // Constructor is private for use only by SymbolTable.
   Symbol(const u1* name, int length, int refcount);
   void* operator new(size_t size, int len, TRAPS) throw();
   void* operator new(size_t size, int len, Arena* arena, TRAPS) throw();
