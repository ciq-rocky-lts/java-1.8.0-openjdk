From bffe2842ea81ed73668e72bc1009f21ac4c2023f Mon Sep 17 00:00:00 2001
From: Martin Balao <mbalao@openjdk.org>
Date: Wed, 24 Jan 2024 06:21:44 +0000
Subject: [PATCH] 8323231: Improve array management

Reviewed-by: andrew
Backport-of: cf20364d0cb3f182880ee91c7fb023615e27becf

Cherry-pick upstream commit-id: bffe2842ea81ed73668e72bc1009f21ac4c2023f

Orabug: 36904352

Signed-off-by: Sourav Sharma <sourav.ss.sharma@oracle.com>
Reviewed-by: Laurence Rochfort <laurence.rochfort@oracle.com>

diff -up openjdk/hotspot/src/share/vm/c1/c1_RangeCheckElimination.cpp.orig openjdk/hotspot/src/share/vm/c1/c1_RangeCheckElimination.cpp
--- openjdk/hotspot/src/share/vm/c1/c1_RangeCheckElimination.cpp.orig	2024-08-23 18:11:55.841306296 +0000
+++ openjdk/hotspot/src/share/vm/c1/c1_RangeCheckElimination.cpp	2024-08-23 18:15:17.585306296 +0000
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2024, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -441,14 +441,14 @@ void RangeCheckEliminator::in_block_moti
 
           if (c) {
             jint value = c->type()->as_IntConstant()->value();
-            if (value != min_jint) {
-              if (ao->op() == Bytecodes::_isub) {
-                value = -value;
-              }
+            if (ao->op() == Bytecodes::_iadd) {
               base = java_add(base, value);
-              last_integer = base;
-              last_instruction = other;
+            } else {
+              assert(ao->op() == Bytecodes::_isub, "unexpected bytecode");
+              base = java_subtract(base, value);
             }
+            last_integer = base;
+            last_instruction = other;
             index = other;
           } else {
             break;
